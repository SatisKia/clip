#!/usr/local/bin/clip
#マンデルブロート集合 Mandelbrot set
#\!-

:ans 0
:gcomplex

:label N  @0	# 乗数
:label KS @1	# 複素平面の縦横の分割数
:label CS @2	# カラーの始点
:label CE @3	# カラーの終点
:label KL @4	# 最大繰り返し回数
:label RS @5	# 複素平面の実部の始点
:label RE @6	# 複素平面の実部の終点
:label IS @7	# 複素平面の虚部の始点
:label IE @8	# 複素平面の虚部の終点

if @! != 1 && @! != 9
	@8 = @7
	@7 = @6
	@6 = @5
	@5 = @4
	@4 = @3
	@3 = @2
	@2 = @1
	@1 = @0
	N  = 2

	:scan ["乗数? ] N
endif
if @! < 8
	KS = 100
	CS = 1
	CE = 255
	KL = 100
	RS = \-2.2
	RE = 0.5
	IS = \-1.35
	IE = 1.35

	:scan ["複素平面の縦横の分割数? ] KS
	:scan ["カラーの始点? ]           CS
	:scan ["カラーの終点? ]           CE
	:scan ["最大繰り返し回数? ]       KL
	:scan ["実部の始点? ]             RS
	:scan ["実部の終点? ]             RE
	:scan ["虚部の始点? ]             IS
	:scan ["虚部の終点? ]             IE
endif

@r = (RE - RS) / KS		# 実部の増分
@i = (IE - IS) / KS		# 虚部の増分

@c = CE - CS + 1		# 使用する色数

:clear
:println ["乗数: ] N
:println ["最大繰り返し回数: ] KL
:println ["実部: ] RS ["～] RE
:println ["虚部: ] IS ["～] IE
@t = time

:gworld KS KS
:gclear 0

for @x = 0; @x < KS; @x++			# 実軸方向ループ
	for @y = 0; @y < KS; @y++		# 虚軸方向ループ
		@a = ((@x * @r + RS) (@y * @i + IS))	# 複素定数
		@z = (0.0 0.0)							# 複素変数の初期値
		for @k = 0; @k <= KL; @k++	# 収束計算のループ
			@Z = pow @z N + @a
			if norm @Z > 4.0
				:gput @x (KS - 1 - @y) (@k % @c + CS)
				break
			endif
			@z = @Z		# 初期値をリセット
		next	# @k[>]KLのとき、収束したとして何も表示しない。
	next
next

!time @t
