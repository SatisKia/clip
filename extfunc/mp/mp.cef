#多倍長計算を行う。エラー時はTRUEを返す。
#\!- <expr> [<prec> [<print_flag> [<debug_flag>]]]
#precに0を指定すると整数モードになる。
#引数がexprのみの場合、桁数としてグローバル変数MP_PRECの値が参照される。
#
#書式:
#  演算の優先順位を指定する括弧()を使用することができる。
#  括弧は釣り合いがとれていなくても構わない。
#
#定数:
#  12345      符号なし整数
#  \-6789      符号付き整数
#  12.345     小数点表記の浮動小数点数
#  1.234e\-5   指数表記の浮動小数点数
#  \-1.234e+5
#  1.234e5    eの後ろの+は省略できる。
#
#変数:
#  Ans   計算結果用変数（親プロセスでの@@:0）
#  a～z  変数（親プロセスでの@@a～@@z）
#
#演算子:
#  単項  \-
#  二項  * / % + \-
#  代入  =
#
#関数:
#  abs(x)    絶対値
#  sqr(x)    自乗
#  sqrt(x)   平方根
#  trunc(x)  小数点以下の切り捨て
#
#制限事項:
#  %は整数モードのみ。
#  sqrt,trunc関数は浮動小数点数モードのみ。

func checkOp op
	switch op
	case 'N
		return 4
	case '\*
	case '\/
	case '\%
		return 3
	case '\+
	case '\-
		return 2
	case '\=
		return 1
	end
	return 0
end

func isParenthesis token[] index
	return token index (token index 0) == '\(
end

func insToken &token[] &tokenNum pos
	:ans FALSE
	$SET @i,tokenNum
	if @i > pos
		$LOOPSTART	# @i
		:arraycopy token (@i - 1) 0 token @i 0 (1 + token (@i - 1) 0)
		$LOOPEND_D	@i,pos
	end
	$INC tokenNum
end

func makeToken expr[] &token[] &tokenNum
	:ans FALSE

	# 空白を取り除く
	:var exprLen
#	$SET_Z exprLen
#	$SET_Z @l
	while expr @l != 0
		if expr @l != [' ]
			$SET expr (exprLen++),expr @l
		end
		$INC @l
	end
	$SET_Z expr exprLen # 文字列終端

#	$SET_Z @c
	:var prev
#	$SET_Z @i
	$SET_Z token @i 0 # 文字数
#	$SET_Z @t
#	$SET_Z @j
	if @j < exprLen
		$LOOPSTART	# @j
		$SET		prev,@c
		$SET		@c,expr @j
		switch @c
		case '\(
		case '\)
		case '\*
		case '\/
		case '\%
		case '\+
		case '\-
		case '\=
			if (@c == '\() && (prev >= 'a && prev <= 'z)
				$SET   token @i ([++]@t),@c
				$SET   token @i 0,@t # 文字数
				$INC   @i
				$SET_Z token @i 0 # 文字数
				$SET_Z @t
				break
			end
			if (@c == '\+) || (@c == '\-)
				if (prev == 'e) || (prev == 'E)
					$SET token @i ([++]@t),@c
					break
				end
			end
			if @t > 0
				$SET   token @i 0,@t # 文字数
				$INC   @i
				$SET_Z token @i 0 # 文字数
				$SET_Z @t
			elif @c == '\-
				if (@j < exprLen - 1) && ((expr (@j + 1) >= '0 && expr (@j + 1) <= '9) || expr (@j + 1) == '.)
					$SET token @i ([++]@t),@c
					break
				end
				$SET @c,'N
			end
			$SET   token @i ([++]@t),@c
			$SET   token @i 0,@t # 文字数
			$INC   @i
			$SET_Z token @i 0 # 文字数
			$SET_Z @t
			break
		default
			$SET token @i ([++]@t),@c
			break
		end
		$LOOPEND_I @j,exprLen
	end
	if @t > 0
		$SET   token @i 0,@t # 文字数
		$ADD_A tokenNum,@i,1
	else
		$SET tokenNum,@i
	end

	:var cur top _end
	:var level topLevel assLevel
	$SET assLevel,checkOp '\=
	:var retTop retEnd

	# 演算子の優先順位に従って括弧を付ける
#	$SET_Z cur
	if cur < tokenNum
		$LOOPSTART # cur
		if (token cur 0 == 1) && (checkOp (token cur 1) > 0)
			# 自分自身の演算子の優先レベルを調べておく
			$SET level,checkOp (token cur 1)

			$SET_Z retTop
			$SET_Z retEnd

			# 前方検索
			$SET_Z @i
			$SUB_A top,cur,1
			if top >= 0
				$LOOPSTART # top

				if isParenthesis token top # 括弧の始まりの場合
					if @i > 0
						$DEC @i
					else
						$SET retTop,1
					end
				elif token top 1 == '\) # 括弧の終わりの場合
					$INC @i
				elif (token top 0 == 1) && (checkOp (token top 1) > 0)
					if @i == 0
						topLevel = checkOp (token top 1)
						if ((topLevel == assLevel) && (level == assLevel)) || (topLevel < level)
							$SET retTop,2
						end
					end
				end

				if retTop == 2
					# 後方検索
					$SET_Z @i
					$ADD_A _end,cur,1
					if _end < tokenNum
						$LOOPSTART # _end
						if isParenthesis token _end # 括弧の始まりの場合
							$INC @i
						elif token _end 1 == '\) # 括弧の終わりの場合
							if @i > 0
								$DEC @i
							else
								$SET retEnd,1
							end
						elif (token _end 0 == 1) && (checkOp (token _end 1) > 0)
							if @i == 0
								if (topLevel != assLevel) && (checkOp (token _end 1) <= topLevel)
									$SET retEnd,2
								end
							end
						end
						$BREAK		(retEnd > 0)
						$LOOPEND_I	_end,tokenNum
					end

					$ADD_A @t,top,1
					insToken token tokenNum @t
					$SET   token @t 1,'\(
					$SET   token @t 0,1 # 文字数
					$INC   cur
					$INC   _end

					if retEnd > 0
						insToken token tokenNum _end
						$SET token _end 1,'\)
						$SET token _end 0,1 # 文字数
					end
				end

				$BREAK		(retTop > 0)
				$LOOPENDE_D	top,0
			end
		end
		$LOOPEND_I cur,tokenNum
	end

	# 括弧を整える
#	$SET_Z @k
	$SET_Z cur
	if cur < tokenNum
		$LOOPSTART # cur
		if isParenthesis token cur # 括弧の始まりの場合
			$INC @k
		elif token cur 1 == '\) # 括弧の終わりの場合
			$DEC @k
			if @k < 0
				$LOOPSTART	# @k
				insToken token tokenNum 0
				$SET		token 0 1,'\(
				$SET		token 0 0,1 # 文字数
				$INC		cur
				$LOOPEND_I	@k,0
			end
		end
		$LOOPEND_I cur,tokenNum
	end
	if @k > 0
		$LOOPSTART	# @k
		$SET		token tokenNum 1,'\)
		$SET		token tokenNum 0,1 # 文字数
		$INC		tokenNum
		$LOOPEND_D	@k,0
	end
end

func tokenStr token[] index &str[]
	:ans FALSE
	:arraycopy token index 1 str 0 (token index 0)
	$SET_Z str (token index 0) # 文字列終端
end

func mp_abs &rop[]
	:ans FALSE
	if MP_PROC_INT; !mp:abs  rop
	else;           !mp:fabs rop
	end
end
func mp_add &ret[] a[] b[]
	:ans FALSE
	if MP_PROC_INT; !mp:add  ret a b
	else;           !mp:fadd ret a b
	end
end
func mp_div &q[] a[] b[]
	if MP_PROC_INT; @r = !mp:div   q a b
	else;           @r = !mp:fdiv2 q a b MP_PREC
	end
	return @r
end
func mp_mul &ret[] a[] b[]
	:ans FALSE
	if MP_PROC_INT; !mp:mul  ret a b
	else;           !mp:fmul ret a b MP_PREC
	end
end
func mp_neg &rop[]
	:ans FALSE
	if MP_PROC_INT; !mp:neg  rop
	else;           !mp:fneg rop
	end
end
func mp_num2str &s[] n[]
	:ans FALSE
	if MP_PROC_INT; !mp:num2str  s n
	else;           !mp:fnum2str s n
	end
end
func mp_set &rop[] op[]
	:ans FALSE
	if MP_PROC_INT; !mp:set  rop op
	else;           !mp:fset rop op
	end
end
func mp_sub &ret[] a[] b[]
	:ans FALSE
	if MP_PROC_INT; !mp:sub  ret a b
	else;           !mp:fsub ret a b
	end
end

func proc token[] tokenNum top &_end &ans[]
	:parent @@:0
	$SET		@i,'a
	$LOOPSTART	# @i
	:parent @@:@i
	$LOOPENDE_I	@i,'z

	$SET_T @f # 初回かどうか
	$SET   @l,\-1
	$SET   @i,top
	if @i < tokenNum
		$LOOPSTART # @i
		tokenStr token @i @@S
		if @f
			$SET_F @f
			if @@S 0 == 'N
				$SET @o,'N
				$INC @i
				if @i >= tokenNum
					:println ["単項-の右辺がありません]
					return TRUE
				end
				tokenStr token @i @@S
			end
		elif @@S 0 == '\) # 括弧の終わりの場合
			$SET _end,@i
			mp_set ans @@L
			return FALSE
		else
			$SET @o,@@S 0
			$INC @i
			if @i >= tokenNum
				!putchar @o
				:println ["の右辺がありません]
				return TRUE
			end
			tokenStr token @i @@S
			if @@S 0 == '\) # 括弧の終わりの場合
				!putchar @o
				:println ["の右辺がありません]
				return TRUE
			end
		end

		# 左辺または右辺の値を取得する
		if @@S (strlen @@S - 1) == '\( # 括弧の始まりの場合
			if @l < 0
				$SET @l,'\(
				$SET @c,'L
			else
				$SET @c,'R
			end
			$RETURN_A proc token tokenNum (@i + 1) @i @@:@c,TRUE
			if strcmp @@S ["abs(] == 0
				mp_abs @@:@c
			elif strcmp @@S ["sqr(] == 0
				mp_mul @@:@c @@:@c @@:@c
			elif strcmp @@S ["sqrt(] == 0
				if MP_PROC_INT
					:println ["sqrtは浮動小数点数モードでしか使えません]
					return TRUE
				else
					if !mp:fsqrt2 @@:@c @@:@c MP_PREC 4
						:println ["sqrtの引数が負の値になりました]
						return TRUE
					end
				end
			elif strcmp @@S ["trunc(] == 0
				if MP_PROC_INT
					:println ["truncは浮動小数点数モードでしか使えません]
					return TRUE
				else
					!mp:ftrunc @@:@c @@:@c
				end
			end
		else
			$STRCMP @a,@@S,["Ans]
			if @l < 0
				$CND @l,(@a == 0),0,@@S 0
				$SET @c,'L
			else
				$SET @c,'R
			end
			if @a == 0
				mp_set @@:@c @@:0
			elif @@S 0 >= 'a && @@S 0 <= 'z
				mp_set @@:@c @@:(@@S 0)
			else
				mp_set @@:@c @@S
			end
		end
		if @c == 'L
			if @o == 'N
				mp_neg @@L
			end
			continue
		end

		# 演算結果を左辺の値にする
		switch @o
		case '\*
			mp_mul @@L @@L @@R
			break
		case '\/
			if mp_div @@L @@L @@R
				:println ["ゼロで除算しました]
				return TRUE
			end
			break
		case '\%
			if MP_PROC_INT
				if !mp:div @@D @@L @@R @@L
					:println ["ゼロで除算しました]
					return TRUE
				end
			else
				:println ["%は整数モードでしか使えません]
				return TRUE
			end
			break
		case '\+
			mp_add @@L @@L @@R
			break
		case '\-
			mp_sub @@L @@L @@R
			break
		case '\=
			if @l == 0 || (@l >= 'a && @l <= 'z)
				mp_set @@:@l @@R
				mp_set @@L @@:@l
			else
				:println ["=の左辺は変数でなければなりません]
				return TRUE
			end
			break
		end
		$LOOPEND_I @i,tokenNum
	end

	mp_set ans @@L
	return FALSE
end

:params expr[] prec print_flag debug_flag

:global MP_PREC MP_PROC_INT
if @! > 1
	$SET MP_PREC,prec
end
$EQ_A MP_PROC_INT,MP_PREC,0

:parent @@:0
$SET		@i,'a
$LOOPSTART	# @i
:parent @@:@i
$LOOPENDE_I	@i,'z

makeToken expr @@T @T
if debug_flag
#	$SET_Z @j
	if @j < @T
		$LOOPSTART # @j
		if @j > 0; :print [" ]; end
		tokenStr @@T @j @@S
		if strcmp @@S "N == 0; :print "\-
		else;                  :print @@S
		end
		$LOOPEND_I @j,@T
	end
	:println
end

$RETURN_A proc @@T @T 0 @t @@A,TRUE

mp_set @@:0 @@A
if print_flag
	mp_num2str @@S @@:0
	:println @@S
end

return FALSE
