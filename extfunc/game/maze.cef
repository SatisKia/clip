#!/usr/local/bin/clip
#迷路 maze
#\!- [<width> <height>] <forecolor> <backcolor>
:params width height forecolor backcolor
:ans 0

if @! < 4
	backcolor = @1
	forecolor = @0
	width = height = 0
	for;;
		:scan ["迷路の横の大きさ? ] width
		if width >= 8; break; else; :error "8以上の値を指定して下さい; endif
	next
	for;;
		:scan ["迷路の縦の大きさ? ] height
		if height >= 8; break; else; :error "8以上の値を指定して下さい; endif
	next
endif
if width < 8 || height < 8
	:error "迷路の大きさは横・縦ともに8以上を指定してください
	return
endif
if @! < 2
	:scan ["前景色? ] forecolor
	:scan ["背景色? ] backcolor
endif
if forecolor == backcolor
	:error "前景色と背景色は異なった色を指定してください
	return
endif

@@d {								# 変位ベクトル
	{ 2 0 \-2 0 }					# X方向
	{ 0 2 0 \-2 }					# Y方向
}
@@t {								# 方向表
	{ 0 1 2 3 } { 0 1 3 2 } { 0 2 1 3 } { 0 2 3 1 } { 0 3 1 2 } { 0 3 2 1 }
	{ 1 0 2 3 } { 1 0 3 2 } { 1 2 0 3 } { 1 2 3 0 } { 1 3 0 2 } { 1 3 2 0 }
	{ 2 0 1 3 } { 2 0 3 1 } { 2 1 0 3 } { 2 1 3 0 } { 2 3 0 1 } { 2 3 1 0 }
	{ 3 0 1 2 } { 3 0 2 1 } { 3 1 0 2 } { 3 1 2 0 } { 3 2 0 1 } { 3 2 1 0 }
}

width  = int (width  / 2) * 2		# 偶数にする
height = int (height / 2) * 2		# 偶数にする
:gworld (width + 1) (height + 1)	# オフスクリーンを設定する
:srand time							# 時刻で乱数を初期化

#
# 地図を初期化
#
:gupdate 0										# 画面更新をＯＦＦにする
:gfill 0 0 (width + 1) (height + 1) forecolor	#
:gfill 3 3 (width - 5) (height - 5) backcolor	#
:gput 2 3 backcolor								# スタート地点
:gput (width - 2) (height - 3) backcolor		# ゴール地点
:gupdate \-1									# 画面更新をＯＮにする

#
# サイトを加える
#
@s = 0
for @i = 4; @i <= width - 4; @i += 2
	@@x @s = @i; @@y @s = 2;          @s++
	@@x @s = @i; @@y @s = height - 2; @s++
next
for @j = 4; @j <= height - 4; @j += 2
	@@x @s = 2;         @@y @s = @j; @s++
	@@x @s = width - 2; @@y @s = @j; @s++
next

while @s [!=] 0
	#
	# サイトを選ぶ
	#
	@s--; @r = int (@s * (rand / (RAND_MAX + 1.0)))
	@i = @@x @r; @@x @r = @@x @s
	@j = @@y @r; @@y @r = @@y @s

	#
	# そこから延ばしていく
	#
	for;;
		@T = int (24 * (rand / (RAND_MAX + 1.0)))
		for @d = 3; @d >= 0; @d--
			@t = @@t @T @d; @I = @i + @@d 0 @t; @J = @j + @@d 1 @t
			if gget @I @J == backcolor; break; endif
		next
		if @d < 0; break; endif
		:gput ((@i + @I) / 2) ((@j + @J) / 2) forecolor
		@i = @I; @j = @J; :gput @i @j forecolor
		@@x @s = @i; @@y @s = @j; @s++
	next
endwhile
