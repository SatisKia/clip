#!NAMESPACE vector
:include !tplot
:include !vector:draw

:ans FALSE

if @! >= 4
	for @i = 1, @j = 0; @i < @!; @i += 3, @j++
		@@0 @j 0 = '0 + @i
		@@0 @j 1 = '0 + @i + 1
		@@0 @j 2 = @:('0 + @i + 2)
	next
	:mat @j 3 @@0
	@1 = @0
else
	for @i = 0; @i < row @@0; @i++
		:parent @@:(@@0 @i 0)
		:parent @@:(@@0 @i 1)
	next
endif

:array v tmp tmp1 tmp2
:array s ss

:var three_d
three_d = (@@:(@@0 0 0) 0 == 3)

@l = @b = @r = @t = 0
@f = TRUE # 初回フラグ
for @i = 0; @i < row @@0; @i++
	for @j = 0; @j < 2; @j++
		if @j == 0
			@c = @@0 @i 0
		else
			!add v @@:@c @@:(@@0 @i 1)
			@c = indexof v
		endif
		if @f
			@f = FALSE
			# X座標
			@l = @@:@c 1
			@r = @@:@c 1
			# Y座標
			@b = @@:@c 2
			@t = @@:@c 2
		else
			# X座標
			if @@:@c 1 < @l; @l = @@:@c 1; endif
			if @@:@c 1 > @r; @r = @@:@c 1; endif
			# Y座標
			if @@:@c 2 < @b; @b = @@:@c 2; endif
			if @@:@c 2 > @t; @t = @@:@c 2; endif
		endif
		if three_d
			# Z座標
			if @@:@c 3 * \-0.5 < @l; @l = @@:@c 3 * \-0.5; endif
			if @@:@c 3 * \-0.5 > @r; @r = @@:@c 3 * \-0.5; endif
			if @@:@c 3 * \-0.5 < @b; @b = @@:@c 3 * \-0.5; endif
			if @@:@c 3 * \-0.5 > @t; @t = @@:@c 3 * \-0.5; endif
			# グラフィックス描画座標
			vector_proj2d tmp @@:@c
			if tmp 1 < @l; @l = tmp 1; endif
			if tmp 1 > @r; @r = tmp 1; endif
			if tmp 2 < @b; @b = tmp 2; endif
			if tmp 2 > @t; @t = tmp 2; endif
		endif
	next
next

# 正方形領域にする
if @r - @l > @t - @b
	@s = ((@r - @l) - (@t - @b)) / 2
	@t += @s
	@b -= @s
else
	@s = ((@t - @b) - (@r - @l)) / 2
	@r += @s
	@l -= @s
endif

# 領域を拡張する
@l -= (@r - @l) / 10
@b -= (@r - @l) / 10
@r += (@r - @l) / 10
@t += (@r - @l) / 10

if three_d
	# 座標系の描画
	vector_window3d @l @b @r @t 1 1 1
	# ガイド線
	for @i = 0; @i < row @@0; @i++
		!add v @@:(@@0 @i 0) @@:(@@0 @i 1)
		vector_guide3d @@:(@@0 @i 0) \x08
		vector_guide3d v \x08
	next
	# ベクトルの描画
	@k = 0
	for @i = 0; @i < row @@0; @i++
		@a = @@0 @i 0
		@b = @@0 @i 1
		vector_draw3d @@:@a @@:@b @1 (@@0 @i 2) tmp1 tmp2
		!add v @@:@a @@:@b
		# 始点
		for @j = 0; @j < @k; @j++
			if ss @j 0 == @@:@a 1 && ss @j 1 == @@:@a 2 && ss @j 2 == @@:@a 3; break; endif
		next
		if @j == @k
			ss @k 0 = @@:@a 1; ss @k 1 = @@:@a 2; ss @k 2 = @@:@a 3; @k++
			:sprint s ["(] (@@:@a 1) [",] (@@:@a 2) [",] (@@:@a 3) [")]
			if tmp1 2 == tmp2 2
				:wtext s (wx (gx (tmp1 1) - 16)) (wy (gy (tmp1 2) + 12)) (@@0 @i 2)
			elif tmp1 2 < tmp2 2
				:wtext s (wx (gx (tmp1 1) - 16)) (wy (gy (tmp1 2) + 12)) (@@0 @i 2)
			else
				:wtext s (wx (gx (tmp1 1) - 16)) (wy (gy (tmp1 2) - 4 )) (@@0 @i 2)
			endif
		endif
		# 終点
		for @j = 0; @j < @k; @j++
			if ss @j 0 == v 1 && ss @j 1 == v 2 && ss @j 2 == v 3; break; endif
		next
		if @j == @k
			ss @k 0 = v 1; ss @k 1 = v 2; ss @k 2 = v 3; @k++
			:sprint s ["(] (v 1) [",] (v 2) [",] (v 3) [")]
			if tmp1 2 == tmp2 2
				:wtext s (wx (gx (tmp2 1) - 16)) (wy (gy (tmp2 2) + 12)) (@@0 @i 2)
			elif tmp1 2 < tmp2 2
				:wtext s (wx (gx (tmp2 1) - 16)) (wy (gy (tmp2 2) - 4 )) (@@0 @i 2)
			else
				:wtext s (wx (gx (tmp2 1) - 16)) (wy (gy (tmp2 2) + 12)) (@@0 @i 2)
			endif
		endif
	next
else
	# 座標系の描画
	window @l @b @r @t 1 1
	# ベクトルの描画
	@k = 0
	for @i = 0; @i < row @@0; @i++
		@a = @@0 @i 0
		@b = @@0 @i 1
		vector_draw2d @@:@a @@:@b @1 (@@0 @i 2) v
		# 始点
		for @j = 0; @j < @k; @j++
			if ss @j 0 == @@:@a 1 && ss @j 1 == @@:@a 2; break; endif
		next
		if @j == @k
			ss @k 0 = @@:@a 1; ss @k 1 = @@:@a 2; @k++
			:sprint s ["(] (@@:@a 1) [",] (@@:@a 2) [")]
			if @@:@a 2 == v 2
				:wtext s (wx (gx (@@:@a 1) - 12)) (wy (gy (@@:@a 2) + 12)) (@@0 @i 2)
			elif @@:@a 2 < v 2
				:wtext s (wx (gx (@@:@a 1) - 12)) (wy (gy (@@:@a 2) + 12)) (@@0 @i 2)
			else
				:wtext s (wx (gx (@@:@a 1) - 12)) (wy (gy (@@:@a 2) - 4 )) (@@0 @i 2)
			endif
		endif
		# 終点
		for @j = 0; @j < @k; @j++
			if ss @j 0 == v 1 && ss @j 1 == v 2; break; endif
		next
		if @j == @k
			ss @k 0 = v 1; ss @k 1 = v 2; @k++
			:sprint s ["(] (v 1) [",] (v 2) [")]
			if @@:@a 2 == v 2
				:wtext s (wx (gx (v 1) - 12)) (wy (gy (v 2) + 12)) (@@0 @i 2)
			elif @@:@a 2 < v 2
				:wtext s (wx (gx (v 1) - 12)) (wy (gy (v 2) - 4 )) (@@0 @i 2)
			else
				:wtext s (wx (gx (v 1) - 12)) (wy (gy (v 2) + 12)) (@@0 @i 2)
			endif
		endif
	next
endif
