#!NAMESPACE ft
#高速Fourier変換 (Cooley-Tukeyのアルゴリズム)
#\!- <array> <num> <inv_flag>
#標本点の数numは2の整数乗に限る。
:params &x[] n inv
:ans FALSE

:define PI 3.14159265358979323846

#
# 三角関数表を作る
#
func make_sintbl &sintbl[] n
	:ans FALSE
	:var n2 n4 n8
	:var c s dc ds t

	n2 = n / 2; n4 = n / 4; n8 = n / 8
	t = sin (PI / n)
	dc = 2 * t * t; ds = sqrt (dc * (2 - dc))
	t = 2 * dc; c = sintbl n4 = 1; s = sintbl 0 = 0
	for @i = 1; @i < n8; @i++
		c -= dc; dc += t * c
		s += ds; ds -= t * s
		sintbl @i = s; sintbl (n4 - @i) = c
	next
	if n8 != 0; sintbl n8 = sqrt 0.5; endif
	for @i = 0; @i < n4; @i++
		sintbl (n2 - @i) = sintbl @i
		sintbl (@i + n2) = [-]sintbl @i
	next
endfunc

#
# ビット反転表を作る
#
func make_bitrev &bitrev[] n
	:ans FALSE
	:var n2

	n2 = n / 2; @i = @j = 0
	for;;
		bitrev @i = @j
		if [++]@i >= n; break; endif
		@k = n2
		while @k <= @j; @j -= @k; @k /= 2; endwhile
		@j += @k
	next
endfunc

:array bitrev # ビット反転表
:array sintbl # 三角関数表
:var ik h d k2 n4
:var t s c dx dy

:complex
n4 = n / 4
sintbl (n + n4 - 1) = 0 # 配列の確保
bitrev (n - 1) = 0 # 配列の確保
make_sintbl sintbl n
make_bitrev bitrev n
for @i = 0; @i < n; @i++ # ビット反転
	@j = bitrev @i
	if @i < @j
		t = x @i; x @i = x @j; x @j = t
	endif
next
for @k = 1; @k < n; @k = k2 # 変換
	h = 0; k2 = @k + @k; d = int (n / k2)
	for @j = 0; @j < @k; @j++
		c = sintbl (h + n4)
		if inv; s = [-]sintbl h # 逆変換の場合
		else;   s =    sintbl h
		endif
		for @i = @j; @i < n; @i += k2
			ik = @i + @k
			dx = s * (imag x ik) + c * (real x ik)
			dy = c * (imag x ik) - s * (real x ik)
			x ik = (((real x @i) - dx) ((imag x @i) - dy))
			x @i = (((real x @i) + dx) ((imag x @i) + dy))
		next
		h += d
	next
next
if [!]inv # 逆変換でないならnで割る
	for @i = 0; @i < n; @i++; x @i /= n; next
endif
