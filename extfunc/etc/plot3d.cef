#文字x,yを含むexprを三次元プロットします
#\!- <expr> <x1> <x2> <x_step> <y1> <y2> <y_step> <z_step> [<every> [<z_scale>]]
#実行例:
#:gworld 256 256
#:gcolor 252
#\!- ["exp([\-\\](x*x+y*y] \\\-2 2 0.2 \\\-2 2 0.2 0.2 5 1
:params expr[] x1 x2 x_step y1 y2 y_step z_step every z_scale

func text3d_x
	:ans FALSE
	:sprint @@s @0
	:gtext @@s (gx @1 - 4) (gy @2 + 9) @3
endfunc
func text3d_y
	:ans FALSE
	:sprint @@s @0
	:gtext @@s (gx @1 + 3) (gy @2 + 7) @3
endfunc
func text3d_z
	:ans FALSE
	:sprint @@s (@0 * @4)
	:gtext @@s 0 (gheight + 8) 0 # 画面外に描画
	:gtext @@s (gx @1 - gcx) (gy @2 + 3) @3
endfunc
func window3d l b r t x y z every z_scale
	:ans FALSE
	:window l b r t
	:gclear \xFF
	for @i = [-]x, @j = 1; @i >= l; @i -= x, @j++
		if (@j % every) == 0
			text3d_x @i @i 0 \xF7
		endif
	next
	for @i = x, @j = 1; @i <= r; @i += x, @j++
		if (@j % every) == 0
			text3d_x @i @i 0 \xF7
		endif
	next
	for @i = [-]z, @j = 1; @i >= b; @i -= z, @j++
		if (@j % every) == 0
			text3d_z @i 0 @i \xF7 z_scale
		endif
	next
	for @i = z, @j = 1; @i <= t; @i += z, @j++
		if (@j % every) == 0
			text3d_z @i 0 @i \xF7 z_scale
		endif
	next
	for @i = [-]y, @j = 1; ; @i -= y, @j++
		if (@j % every) == 0
			text3d_y @i (@i * \-0.5) (@i * \-0.5) \xF7
			if gcx < 0 || gcx >= gwidth || gcy < 0 || gcy >= gheight
				break
			endif
		endif
	next
	for @i = y, @j = 1; ; @i += y, @j++
		if (@j % every) == 0
			text3d_y @i (@i * \-0.5) (@i * \-0.5) \xF7
			if gcx < 0 || gcx >= gwidth || gcy < 0 || gcy >= gheight
				break
			endif
		endif
	next
	:wline l 0 r 0 \xF7
	:wline 0 b 0 t \xF7
	if b < 0 && t > 0
		:wline b b 0 0 \xF7
		:wline 0 0 t t \xF7
	else
		:wline b b t t \xF7
	endif
	:gtext ["0] (gx 0 + 2) (gy 0 + 9) \xF7
endfunc

func proj2d &x2 &z2 x1 y1 z1
	:ans FALSE
	y1 *= 0.5
	x2 = x1 + y1
	z2 = z1 + y1
endfunc

func draw3d x1 y1 z1 x2 y2 z2 color
	:ans FALSE
	proj2d x1 z1 x1 y1 z1
	proj2d x2 z2 x2 y2 z2
	:wline x1 z1 x2 z2 color
endfunc

:ans FALSE

if x1 > x2; @t = x1; x1 = x2; x2 = @t; endif
if y1 > y2; @t = y1; y1 = y2; y2 = @t; endif
if x_step < 0; x_step = abs x_step; endif
if y_step < 0; y_step = abs y_step; endif
if z_step < 0; z_step = abs z_step; endif
every = int every; if every == 0; every = 1; elif every < 0; every = abs every; endif
if z_scale == 0; z_scale = 1; elif z_scale < 0; z_scale = abs z_scale; endif

:global x y
for y = y1, @i = 0; y <= y2; y += y_step, @i++
	for x = x1, @j = 0; x <= x2; x += x_step, @j++
		@@a @i @j 0 = x
		@@a @i @j 1 = y
		@@a @i @j 2 = eval expr * z_scale
	next
	@X = @j
next
@Y = @i

@l = @b = @r = @t = 0
@f = TRUE # 初回フラグ
for @i = 0; @i < @Y; @i++
	for @j = 0; @j < @X; @j++
		proj2d @x @z (@@a @i @j 0) (@@a @i @j 1) (@@a @i @j 2)
		if @f
			@f = FALSE
			@l = @x
			@r = @x
			@b = @z
			@t = @z
		else
			if @x < @l; @l = @x; endif
			if @x > @r; @r = @x; endif
			if @z < @b; @b = @z; endif
			if @z > @t; @t = @z; endif
		endif
	next
next

# 正方形領域にする
if @r - @l > @t - @b
	@s = ((@r - @l) - (@t - @b)) / 2
	@t += @s
	@b -= @s
else
	@s = ((@t - @b) - (@r - @l)) / 2
	@r += @s
	@l -= @s
endif

@c = gcolor # 現在色を取得しておく
window3d @l @b @r @t x_step y_step z_step every z_scale
if x2 - x1 >= y2 - y1
	for @i = 0; @i < @Y; @i++
		for @j = 1; @j < @X; @j++
			@k = @j - 1
			draw3d (@@a @i @k 0) (@@a @i @k 1) (@@a @i @k 2) (@@a @i @j 0) (@@a @i @j 1) (@@a @i @j 2) @c
		next
	next
endif
if x2 - x1 <= y2 - y1
	for @i = 1; @i < @Y; @i++
		@k = @i - 1
		for @j = 0; @j < @X; @j++
			draw3d (@@a @k @j 0) (@@a @k @j 1) (@@a @k @j 2) (@@a @i @j 0) (@@a @i @j 1) (@@a @i @j 2) @c
		next
	next
endif
:gcolor @c # 現在色を戻す
