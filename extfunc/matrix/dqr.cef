#非対称行列の固有値計算：ダブルQR法（ヘッセンベルグ行列の固有値計算）
#@n = !- @@a @@e
:params a[] &z[]

for @i = 0; @i < row a; @i++
	z @i = 0.0
next

if row a != col a
	return 0
endif

:var n
n = row a
:array zr zi

:var l j k m kaisuu kmax kp3 made
kmax = 256
:array f g
:var v0 v1 v2 d dd wa seki bunbo
:var g1 g2 g3 r a00 alpha

m = n - 1
while m >= 0
	if m == 0
		zr 0 = a 0 0
		zi 0 = 0.0
		break
	endif
	for kaisuu = 1; kaisuu < kmax; [++]kaisuu
		# 収束判定
		if abs (a m (m - 1)) < 0.00001
			zr m = a m m
			zi m = 0.0
			m -= 1
			break
		endif
		if abs (a (m - 1) (m - 2)) < 0.00001
 			wa = ([-]a (m - 1) (m - 1) - a m m)
			seki = a (m - 1) (m - 1) * a m m - a (m - 1) m * a m (m - 1)
			dd = wa * wa - 4.0 * seki
			d = sqrt (abs dd)
			if dd > 0.0
				if wa > 0.0; d = [-]d; endif
				zr (m - 1) = ([-]wa + d) / 2.0
				zr  m      = seki / zr (m - 1)
				zi m = zi (m - 1) = 0.0
			else
				zr m = zr (m - 1) = ([-]wa) / 2.0
				zi  m      =     d / 2.0
				zi (m - 1) = ([-]d / 2.0)
			endif
			m -= 2
			break
		endif
 		wa   = a (m - 1) (m - 1) + a m m
		seki = a (m - 1) (m - 1) * a m m - a (m - 1) m * a m (m - 1)
		# 1列め
		a00 = a 0 0
		g1 = a00 * a00 + a 0 1 * a 1 0 - a00 * wa + seki
		g2 = a 1 0 * a00 + a 1 1 * a 1 0 - a 1 0 * wa
		g3 = a 2 1 * a 1 0
		r = sqrt (g1 * g1 + g2 * g2 + g3 * g3)
		if g1 > 0.0; r = [-]r; endif
		bunbo = g1 - r
		v0 = 1.0
		v1 = g2 / bunbo
		v2 = g3 / bunbo
		alpha = 2.0 / (1.0 + v1 * v1 + v2 * v2)
		for j = 0; j <= m; [++]j
			f j = (a 0 j + v1 * a 1 j + v2 * a 2 j) * alpha
		next
		for j = 0; j <= m; [++]j
			a 0 j -=      f j
			a 1 j -= v1 * f j
			a 2 j -= v2 * f j
		next
		for l = 0; l <= 3; [++]l
			g l = (a l 0 + a l 1 * v1 + a l 2 * v2) * alpha
		next
		for l = 0; l <= 3; [++]l
			a l 0 -= g l
			a l 1 -= g l * v1
			a l 2 -= g l * v2
		next
		# 再ヘッセンベルグ化
		for k = 1; k <= m - 1; [++]k
			g1 = a  k      (k - 1)
			g2 = a (k + 1) (k - 1)
			g3 = a (k + 2) (k - 1)
			r = sqrt (g1 * g1 + g2 * g2 + g3 * g3)
			if g1 > 0.0; r = [-]r; endif
			bunbo = g1 - r
			v0 = 1.0
			v1 = g2 / bunbo
			v2 = g3 / bunbo
			alpha = 2.0 / (1.0 + v1 * v1 + v2 * v2)
			for j = k - 1; j <= m; [++]j
				f j = alpha * (a k j + v1 * a (k + 1) j + v2 * a (k + 2) j)
			next
			for j = k - 1; j <= m; [++]j
				a  k      j -=      f j
				a (k + 1) j -= v1 * f j
				a (k + 2) j -= v2 * f j
			next
			made = ((kp3 = k + 3) <= m) ? kp3 m
			for l = 0; l <= made; [++]l
				g l = alpha * (a l k + a l (k + 1) * v1 + a l (k + 2) * v2)
			next
			for l = 0; l <= made; [++]l
				a l  k      -= g l
				a l (k + 1) -= g l * v1
				a l (k + 2) -= g l * v2
			next
		next
	next
endwhile

:complex
for l = 0; l < n; [++]l
	z l = ((zr l) (zi l))
next

return n
