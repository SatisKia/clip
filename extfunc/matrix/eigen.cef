#対称行列の固有値計算：QR法
#@n = !- @@a @@e @@v

:label d @@1
:param 1 TRUE
for @i = 0; @i < row @@0; @i++
	d @i = 0.0
next
:label a @@2
:param 2 TRUE
a = @@Z

if row @@0 != col @@0
	return 0
endif

:define EPS 1E-6 # 許容誤差
:define MAX_ITER 100 # 最大の繰返し数

# ベクトルの内積
func ip n u[] uu v[] vv
	:var j n5
	:var s

	s = 0; n5 = n % 5
	for j = 0; j < n5; j++
		s += u (uu + j    ) * v (vv + j    )
	next
	for j = n5; j < n; j += 5
		s += u (uu + j    ) * v (vv + j    )
		s += u (uu + j + 1) * v (vv + j + 1)
		s += u (uu + j + 2) * v (vv + j + 2)
		s += u (uu + j + 3) * v (vv + j + 3)
		s += u (uu + j + 4) * v (vv + j + 4)
	next
	return s
endfunc

# Householder(ハウスホルダー)変換
func house n &x[] xx
	:var j
	:var s t

	s = sqrt (ip n x xx x xx) # 内積の平方根、すなわちベクトルxの大きさ
	if s != 0
		if x xx < 0; s = [-]s; endif
		x xx += s; t = 1 / sqrt (x xx * s)
		for j = 0; j < n; j++
			x (xx + j) *= t
		next
	endif
	return [-]s
endfunc

# 3重対角化
func tridiag &a[] &d[] &e[] ee
	:var n
	:var m j k l
	:var s t p q
	:array v w

	n = row a
	for k = 0; k < n - 2; k++
		for l = 0; l < n; l++; v l = a k l; next; d k = v k
		e (ee + k) = house (n - k - 1) v (k + 1) # Householder変換
		for l = 0; l < n; l++; a k l = v l; next
		if e (ee + k) == 0; continue; endif
		for m = k + 1; m < n; m++
			s = 0
			for j = k + 1; j < m; j++; s += a j m * v j; next
			for j = m    ; j < n; j++; s += a m j * v j; next
			d m = s
		next
		t = ip (n - k - 1) v (k + 1) d (k + 1) / 2 # 内積
		for m = n - 1; m > k; m--
			p = v m; q = d m - t * p; d m = q
			for j = m; j < n; j++
				a m j -= p * d j + q * v j
			next
		next
	next
	if n >= 2
		d (     n - 2) = a (n - 2) (n - 2)
		e (ee + n - 2) = a (n - 2) (n - 1)
	endif
	if n >= 1
		d (n - 1) = a (n - 1) (n - 1)
	endif
	for k = n - 1; k >= 0; k--
		if k < n - 2
			for m = k + 1; m < n; m++
				for l = 0; l < n; l++; v l = a k l; next
				for l = 0; l < n; l++; w l = a m l; next
				t = ip (n - k - 1) v (k + 1) w (k + 1) # 内積
				for j = k + 1; j < n; j++
					a m j -= t * v j
				next
			next
		endif
		for m = 0; m < n; m++; a k m = 0; next
		a k k = 1
	next
endfunc

:var n
:var l j k h iter
:var c s t w x y
:array e

n = row @@0
a = @@0

tridiag a d e 1 # 3重対角化
e 0 = 0 # 番人
for h = n - 1; h > 0; h-- # 行列のサイズを小さくしていく
	# e[j]≠0のブロックの始点を見つける
	j = h
	while j > 0 && abs (e j) > EPS * (abs (d (j - 1)) + abs (d j))
		j--
	endwhile
	if j == h; continue; endif
	iter = 0
	do
		if [++]iter > MAX_ITER
			return 0
		endif
		w = (d (h - 1) - d h) / 2
		t = e h * e h
		s = sqrt (w * w + t); if w < 0; s = [-]s; endif
		x = d j - d h + t / (w + s); y = e (j + 1)
		for k = j; k < h; k++
			if abs x >= abs y
				t = [-]y / x; c = 1 / sqrt (t * t + 1)
				s = t * c
			else
				t = [-]x / y; s = 1 / sqrt (t * t + 1)
				c = t * s
			endif
			w = d k - d (k + 1)
			t = (w * s + 2 * c * e (k + 1)) * s
			d k -= t; d (k + 1) += t
			if k > j; e k = c * e k - s * y; endif
			e (k + 1) += s * (c * w - 2 * s * e (k + 1))
			for l = 0; l < n; l++
				x = a k l; y = a (k + 1) l
				a  k      l = c * x - s * y
				a (k + 1) l = s * x + c * y
			next
			if k < h - 1
				x = e (k + 1); y = [-]s * e (k + 2)
				e (k + 2) *= c
			endif
		next
	until abs (e h) > EPS * (abs (d (h - 1)) + abs (d h))
next
# 固有値を降順に整列
for k = 0; k < n - 1; k++
	h = k; t = d h
	for l = k + 1; l < n; l++
		if d l > t
			h = l; t = d h
		endif
	next
	d h = d k; d k = t
	for l = 0; l < n; l++
		t     = a h l
		a h l = a k l
		a k l = t
	next
next
return n
