#対称行列の固有値計算

:include !tmatrix

:ans FALSE
:assert TRUE
:gcomplex 16

func eigen
	:gcomplex 16

	:println ["eigen]
	@n = !eigen @@0 @@e @@v
	:println @n
	print_m @@0
	print_a @@e @n
	print_m @@v
	product_t @@0 @n @@e @@v

	:println ["jac]
	@n = !jac @@0 @@e @@v
	:println @n
	print_m @@0
	print_a @@e @n
	print_m @@v
	product @@0 @n @@e @@v

	:println ["jacobi2]
	@n = !jacobi2 @@0 @@e @@v
	:println @n # 必要としたJacobi回転の回数
	print_m @@0
	print_a @@e (row @@0)
	print_m @@v
	product @@0 (row @@0) @@e @@v

	:println ["jacobi3]
	@n = !jacobi3 @@0 @@e @@v
	:println @n
	print_m @@0
	print_a @@e @n
	print_m @@v
	product_t @@0 @n @@e @@v

	:println ["pm]
	@n = !pm @@0 10 @@e @@v
	:println @n
	print_m @@0
	print_a @@e @n
	print_m @@v
	product_t @@0 @n @@e @@v

	:println ["power2]
	@n = !power2 @@0 10 @@e @@v
	:println @n
	print_m @@0
	print_a @@e @n
	print_m @@v
	product_t @@0 @n @@e @@v

	:println ["ql]
	@n = !ql @@0 @@e @@v
	:println @n
	print_m @@0
	print_a @@e @n
	print_m @@v
	product @@0 @n @@e @@v

	:println ["qr]
	@@a = !hh @@0 # ハウスホルダー変換（実対称行列を3重対角行列に変換）
	@n = !qr @@a @@e
	:println @n
	print_m @@0
	print_m @@a
	print_a @@e @n

	:println ["qr2]
	@n = !qr2 @@0 @@e
	:println @n
	print_m @@0
	print_a @@e @n

	:println ["qrs]
	@@a = !hh @@0 # ハウスホルダー変換（実対称行列を3重対角行列に変換）
	@n = !qrs @@a @@e
	:println @n
	print_m @@0
	print_m @@a
	print_a @@e @n

endfunc
func jacobi
	:gcomplex 16

	:println ["jacobi]
	@r = !jacobi @@0 @@e @@v
	:println @r
	print_m @@0
	print_a @@e (row @@0)
	print_m @@v
	if @! > 1
		for @i = 0; @i < row @@0; @i++
			assert approx_d (@@e @i) (@@1 @i)
		next
		assert approx @@v @@2
	endif
	product @@0 (row @@0) @@e @@v

endfunc
func power
	:gcomplex 16

	:println ["power]
	@r = !power @@0 @e @@v
	:println @r
	print_m @@0
	:println @e
	print_a @@v (row @@0)
	if @! > 1
		assert approx_d @e @1
		for @i = 0; @i < @n; @i++
			assert approx_d (@@v @i) (@@2 @i 0)
		next
	endif

endfunc

switch @0
case 1
	@@a{{1 1 1}{1 2 2}{1 2 3}}
	@@b{5.04891734 0.64310413}
	@@c{{\-0.32798528 \-0.73697609}
	    {\-0.59100905 \-0.32798544}
	    {\-0.73697623   0.59100914}}
	eigen @@a
	jacobi @@a
	power @@a
	:println ["SUCCESS testing matrix, part 4-1]
	breakswi
case 2
	@@a{{5 4 1 1}{4 5 1 1}{1 1 4 2}{1 1 2 4}}
	@@b{10 1 5 2}
	@@c{{0.632456 \-0.707107 \-0.316228 \-0       }
	    {0.632456   0.707107 \-0.316228   0       }
	    {0.316228   0          0.632456 \-0.707107}
	    {0.316228 \-0          0.632456   0.707107}}
	eigen @@a
	jacobi @@a
	power @@a
	:println ["SUCCESS testing matrix, part 4-2]
	breakswi
case 3
	@@a{{1 3 3 1}{3 2 0 2}{3 0 3 1}{1 2 1 1}}
	@@b{\-2.7174 6.9340 2.7448 3.8671e-02}
	@@c{{  7.0725e-01 5.8224e-01   2.9944e-02 \-3.9987e-01}
	    {\-5.3841e-01 4.9839e-01 \-6.2217e-01 \-2.7318e-01}
	    {\-4.0767e-01 5.3454e-01   7.3178e-01   1.1208e-01}
	    {  2.0908e-01 3.5618e-01 \-2.7660e-01   8.6771e-01}}
	eigen @@a
	jacobi @@a @@b @@c
	power @@a (@@b 1) (col_m @@c 1)
	:println ["SUCCESS testing matrix, part 4-3]
	breakswi
endswi
