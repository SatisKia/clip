#不完全ベータ関数Ix(a,b)を返す（0≦x≦1）
#\!- <a> <b> <x>
:params a b x

:define ITMAX 100
:define EPS 3.0e-7

# 不完全ベータ関数の連分数。
func betacf a b x
	:var qap qam qab em tem d
	:var bz bm bp bpp
	bm=1.0
	:var az am ap app aold
	az=1.0;am=1.0
	:var m

	qab=a+b
	qap=a+1.0
	qam=a-1.0
	bz=1.0-qab*x/qap
	for m=1;m<=ITMAX;m++
		em=m
		tem=em+em
		d=em*(b-em)*x/((qam+tem)*(a+tem))
		ap=az+d*am # 漸化式の1ステップ（偶数）
		bp=bz+d*bm
		d = [-](a+em)*(qab+em)*x/((qap+tem)*(a+tem))
		app=ap+d*az # 漸化式の次のステップ（奇数）
		bpp=bp+d*bz
		aold=az # 古い答えを保存
		am=ap/bpp # 桁あふれを避けるため再規格化する
		bm=bp/bpp
		az=app/bpp
		bz=1.0
		if abs(az-aold) < (EPS*abs az); return az; endif # 完成？
	next
endfunc

:var bt

if x == 0.0 || x == 1.0; bt=0.0
else # 連分数に掛け算する因子
	bt=exp(!gammln(a+b)-!gammln a-!gammln b+a*log x+b*log(1.0-x))
endif
if x < (a+1.0)/(a+b+2.0) # 連分数を直接使う
	return bt*betacf a b x/a
else # 対称変換後に連分数を使う
	return 1.0-bt*betacf b a(1.0-x)/b
endif
